// Code generated by protoc-gen-go. DO NOT EDIT.
// source: User.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_979821478719c248, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUserRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979821478719c248, []int{1}
}

func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserRequest.Unmarshal(m, b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserRequest.Size(m)
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type AddUserResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddUserResponse) Reset()         { *m = AddUserResponse{} }
func (m *AddUserResponse) String() string { return proto.CompactTextString(m) }
func (*AddUserResponse) ProtoMessage()    {}
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979821478719c248, []int{2}
}

func (m *AddUserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddUserResponse.Unmarshal(m, b)
}
func (m *AddUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddUserResponse.Marshal(b, m, deterministic)
}
func (m *AddUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUserResponse.Merge(m, src)
}
func (m *AddUserResponse) XXX_Size() int {
	return xxx_messageInfo_AddUserResponse.Size(m)
}
func (m *AddUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddUserResponse proto.InternalMessageInfo

func (m *AddUserResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*GetUserRequest)(nil), "user.GetUserRequest")
	proto.RegisterType((*AddUserResponse)(nil), "user.AddUserResponse")
}

func init() { proto.RegisterFile("User.proto", fileDescriptor_979821478719c248) }

var fileDescriptor_979821478719c248 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xdd, 0x12, 0x13, 0x9d, 0x80, 0xc2, 0xa0, 0xb5, 0xc4, 0x4b, 0xc9, 0x29, 0x3d, 0xb8,
	0x2d, 0x56, 0x3f, 0x40, 0x0f, 0x52, 0x04, 0x4f, 0x11, 0xcf, 0x62, 0xcd, 0x58, 0x02, 0x69, 0x37,
	0xee, 0x1f, 0xc1, 0x4f, 0xe1, 0x57, 0x96, 0xd9, 0x5d, 0xc1, 0x0a, 0x42, 0x6f, 0x3b, 0x6f, 0xdf,
	0x6f, 0xde, 0x3c, 0x80, 0x27, 0x43, 0x5a, 0xf6, 0x5a, 0x59, 0x85, 0x89, 0x33, 0xa4, 0x8b, 0xcb,
	0xb5, 0x52, 0xeb, 0x8e, 0xa6, 0x5e, 0x5b, 0xb9, 0xb7, 0x29, 0x6d, 0x7a, 0xfb, 0x19, 0x2c, 0xe5,
	0x1c, 0x12, 0x06, 0xf0, 0x02, 0x32, 0x36, 0x3f, 0xb7, 0xcd, 0x48, 0x8c, 0x45, 0x75, 0x58, 0xa7,
	0x3c, 0xde, 0x37, 0x88, 0x90, 0x6c, 0x5f, 0x36, 0x34, 0x1a, 0x8c, 0x45, 0x75, 0x5c, 0xfb, 0x77,
	0x39, 0x81, 0x93, 0x25, 0x59, 0xe6, 0x6a, 0x7a, 0x77, 0x64, 0xec, 0xbf, 0x78, 0x39, 0x81, 0xd3,
	0x45, 0xd3, 0x04, 0xab, 0xe9, 0xd5, 0xd6, 0x10, 0x0e, 0x21, 0xd5, 0x64, 0x5c, 0x67, 0xbd, 0xf5,
	0xa8, 0x8e, 0xd3, 0xf5, 0xd7, 0x00, 0x72, 0x36, 0x3e, 0x92, 0xfe, 0x68, 0x5f, 0x09, 0xaf, 0x20,
	0x8b, 0x29, 0x78, 0x26, 0x79, 0x9d, 0xdc, 0x0d, 0x2d, 0x20, 0xa8, 0x2c, 0x95, 0x07, 0x78, 0x03,
	0xb0, 0x24, 0xbb, 0xe8, 0x3a, 0x4f, 0x0c, 0x65, 0x68, 0x2d, 0x7f, 0x5a, 0xcb, 0x3b, 0x6e, 0xbd,
	0xcb, 0xcc, 0x04, 0xde, 0x42, 0x1e, 0xb7, 0x3e, 0xb4, 0xc6, 0xee, 0x13, 0x54, 0x89, 0x99, 0x40,
	0x09, 0x59, 0xac, 0x85, 0xbf, 0x3e, 0x8b, 0xf3, 0xf0, 0xfe, 0xd3, 0xd8, 0x1f, 0x97, 0x47, 0xd1,
	0xc7, 0xec, 0xc3, 0x54, 0x62, 0x95, 0xfa, 0xe3, 0xe7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcb,
	0xfe, 0xb9, 0x47, 0xd4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetAllUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserService_GetAllUserClient, error)
	GetUserList(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserListClient, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AddUserResponse, error)
	AddUserList(ctx context.Context, opts ...grpc.CallOption) (UserService_AddUserListClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserService_GetAllUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/user.UserService/GetAllUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllUserClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceGetAllUserClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllUserClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserList(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/user.UserService/GetUserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserListClient{stream}
	return x, nil
}

type UserService_GetUserListClient interface {
	Send(*GetUserRequest) error
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceGetUserListClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserListClient) Send(m *GetUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserListClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserList(ctx context.Context, opts ...grpc.CallOption) (UserService_AddUserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[2], "/user.UserService/AddUserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceAddUserListClient{stream}
	return x, nil
}

type UserService_AddUserListClient interface {
	Send(*User) error
	CloseAndRecv() (*AddUserResponse, error)
	grpc.ClientStream
}

type userServiceAddUserListClient struct {
	grpc.ClientStream
}

func (x *userServiceAddUserListClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceAddUserListClient) CloseAndRecv() (*AddUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetAllUser(*emptypb.Empty, UserService_GetAllUserServer) error
	GetUserList(UserService_GetUserListServer) error
	AddUser(context.Context, *User) (*AddUserResponse, error)
	AddUserList(UserService_AddUserListServer) error
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceServer) GetAllUser(req *emptypb.Empty, srv UserService_GetAllUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (*UnimplementedUserServiceServer) GetUserList(srv UserService_GetUserListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (*UnimplementedUserServiceServer) AddUser(ctx context.Context, req *User) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedUserServiceServer) AddUserList(srv UserService_AddUserListServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUserList not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllUser(m, &userServiceGetAllUserServer{stream})
}

type UserService_GetAllUserServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceGetAllUserServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllUserServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetUserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserList(&userServiceGetUserListServer{stream})
}

type UserService_GetUserListServer interface {
	Send(*User) error
	Recv() (*GetUserRequest, error)
	grpc.ServerStream
}

type userServiceGetUserListServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserListServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserListServer) Recv() (*GetUserRequest, error) {
	m := new(GetUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).AddUserList(&userServiceAddUserListServer{stream})
}

type UserService_AddUserListServer interface {
	SendAndClose(*AddUserResponse) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServiceAddUserListServer struct {
	grpc.ServerStream
}

func (x *userServiceAddUserListServer) SendAndClose(m *AddUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceAddUserListServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUser",
			Handler:       _UserService_GetAllUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserList",
			Handler:       _UserService_GetUserList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddUserList",
			Handler:       _UserService_AddUserList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "User.proto",
}
